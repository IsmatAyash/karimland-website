type Product
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: groups, groups: ["Admin"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  )
  @key(name: "bySeller", fields: ["seller_id"])
  @key(name: "cartByUser", fields: ["user_id"])
  @key(
    name: "productByPrice"
    fields: ["baseType", "price"]
    queryField: "ProductsByPrice"
  )
  @key(
    name: "productByTitle"
    fields: ["baseType", "title"]
    queryField: "ProductsByTitle"
  )
  @key(
    name: "productByCategory"
    fields: ["baseType", "category"]
    queryField: "ProductsByCategory"
  )
  @key(
    name: "productByInventory"
    fields: ["baseType", "inventory"]
    queryField: "productsByInventory"
  ) {
  id: ID!
  seller_id: ID!
  user_id: ID!
  title: String!
  image: String!
  inventory: Int
  price: Float!
  unit: String!
  oldPrice: Float
  avgRating: Float
  ratings: Int
  category: String!
  featured: Boolean!
  description: [AWSJSON!]
  tags: [String!]
  baseType: String!
  orders: [ProductOrder] @connection(keyName: "byProduct", fields: ["id"])
  seller: Seller @connection(fields: ["seller_id"])
  cart: Cart @connection(fields: ["user_id"])
}

type Seller
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: groups, groups: ["Admin"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  address: String!
  country: String!
  products: [Product] @connection(keyName: "bySeller", fields: ["id"])
}

type ProductOrder
  @model(queries: null, subscriptions: null)
  @key(name: "byProduct", fields: ["product_id", "order_id"])
  @key(name: "byOrder", fields: ["order_id", "product_id"])
  @auth(
    rules: [
      # allow admins to create productorders for customers by using customer email in lambda
      { allow: owner, identityClaim: "email", ownerField: "customer" }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  product_id: ID!
  order_id: ID!
  product: Product @connection(fields: ["product_id"])
  order: Order @connection(fields: ["order_id"])
}

type Order
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, identityClaim: "email", ownerField: "customer" }
      { allow: groups, groups: ["Admin"] }
    ]
  )
  @key(name: "byUser", fields: ["user"]) {
  id: ID!
  user: String!
  date: String
  total: Float
  products: [ProductOrder] @connection(keyName: "byOrder", fields: ["id"])
}

type Cart
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, identityClaim: "email", ownerField: "customer" }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  total: Float
  products: [Product] @connection(keyName: "cartByUser", fields: ["id"])
}

type ProductCart
  @model(queries: null, subscriptions: null)
  @key(name: "cartByProduct", fields: ["product_id", "user_id"])
  @key(name: "byCart", fields: ["user_id", "product_id"])
  @auth(
    rules: [
      # allow admins to create productorders for customers by using customer email in lambda
      { allow: owner, identityClaim: "email", ownerField: "customer" }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  product_id: ID!
  user_id: ID!
  quantity: Int
  product: Product @connection(fields: ["product_id"])
  cart: Cart @connection(fields: ["user_id"])
}
